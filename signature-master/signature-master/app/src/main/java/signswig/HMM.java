package signswig;
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.33
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


public class HMM {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected HMM(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(HMM obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if(swigCPtr != 0 && swigCMemOwn) {
      swigCMemOwn = false;
      signJNI.delete_HMM(swigCPtr);
    }
    swigCPtr = 0;
  }

  public void setTbStSequence(SWIGTYPE_p_p_int value) {
    signJNI.HMM_tbStSequence_set(swigCPtr, this, SWIGTYPE_p_p_int.getCPtr(value));
  }

  public SWIGTYPE_p_p_int getTbStSequence() {
    long cPtr = signJNI.HMM_tbStSequence_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_p_int(cPtr, false);
  }

  public void setTbStSequenceLen(SWIGTYPE_p_int value) {
    signJNI.HMM_tbStSequenceLen_set(swigCPtr, this, SWIGTYPE_p_int.getCPtr(value));
  }

  public SWIGTYPE_p_int getTbStSequenceLen() {
    long cPtr = signJNI.HMM_tbStSequenceLen_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_int(cPtr, false);
  }

  public void setInitializationProperty(boolean bRandomInit_) {
    signJNI.HMM_setInitializationProperty(swigCPtr, this, bRandomInit_);
  }

  public double computeViterbiHamDistance(SWIGTYPE_p_int firstSeq, int firstSeqLen, SWIGTYPE_p_int secondSeq, int secondSeqLen) {
    return signJNI.HMM_computeViterbiHamDistance(swigCPtr, this, SWIGTYPE_p_int.getCPtr(firstSeq), firstSeqLen, SWIGTYPE_p_int.getCPtr(secondSeq), secondSeqLen);
  }

  public boolean normalizeObsParameters(Obs ob) {
    return signJNI.HMM_normalizeObsParameters(swigCPtr, this, Obs.getCPtr(ob), ob);
  }

  public void setNStates(int N_) {
    signJNI.HMM_setNStates(swigCPtr, this, N_);
  }

  public void setNGaussians(int M_) {
    signJNI.HMM_setNGaussians(swigCPtr, this, M_);
  }

  public double getLLba() {
    return signJNI.HMM_getLLba(swigCPtr, this);
  }

  public boolean assignObs(int K_) {
    return signJNI.HMM_assignObs(swigCPtr, this, K_);
  }

  public int getStateNumber() {
    return signJNI.HMM_getStateNumber(swigCPtr, this);
  }

  public int getObsNumber() {
    return signJNI.HMM_getObsNumber(swigCPtr, this);
  }

  public boolean isInit() {
    return signJNI.HMM_isInit(swigCPtr, this);
  }

  public HMM(String modelFile, boolean binary) {
    this(signJNI.new_HMM__SWIG_0(modelFile, binary), true);
  }

  public HMM(int N_, int M_, int transType_, int covMatrixType_, boolean bRandomInit_, boolean bParameterNormalization_, double parameterStandardDeviation_, double endAccuracy_, int endIterationNumber_) {
    this(signJNI.new_HMM__SWIG_1(N_, M_, transType_, covMatrixType_, bRandomInit_, bParameterNormalization_, parameterStandardDeviation_, endAccuracy_, endIterationNumber_), true);
  }

  public HMM(int N_, int M_, int transType_, int covMatrixType_, boolean bRandomInit_, boolean bParameterNormalization_, double parameterStandardDeviation_, double endAccuracy_) {
    this(signJNI.new_HMM__SWIG_2(N_, M_, transType_, covMatrixType_, bRandomInit_, bParameterNormalization_, parameterStandardDeviation_, endAccuracy_), true);
  }

  public HMM(int N_, int M_, int transType_, int covMatrixType_, boolean bRandomInit_, boolean bParameterNormalization_, double parameterStandardDeviation_) {
    this(signJNI.new_HMM__SWIG_3(N_, M_, transType_, covMatrixType_, bRandomInit_, bParameterNormalization_, parameterStandardDeviation_), true);
  }

  public HMM(int N_, int M_, int transType_, int covMatrixType_, boolean bRandomInit_, boolean bParameterNormalization_) {
    this(signJNI.new_HMM__SWIG_4(N_, M_, transType_, covMatrixType_, bRandomInit_, bParameterNormalization_), true);
  }

  public HMM(int N_, int M_, int transType_, int covMatrixType_, boolean bRandomInit_) {
    this(signJNI.new_HMM__SWIG_5(N_, M_, transType_, covMatrixType_, bRandomInit_), true);
  }

  public HMM(int N_, int M_, int transType_, int covMatrixType_) {
    this(signJNI.new_HMM__SWIG_6(N_, M_, transType_, covMatrixType_), true);
  }

  public HMM(int N_, int M_, int transType_) {
    this(signJNI.new_HMM__SWIG_7(N_, M_, transType_), true);
  }

  public HMM(int N_, int M_) {
    this(signJNI.new_HMM__SWIG_8(N_, M_), true);
  }

  public boolean initHMM() {
    return signJNI.HMM_initHMM(swigCPtr, this);
  }

  public double viterbi(Obs ob, SWIGTYPE_p_p_int statSeq, boolean last_state_exit_oblige) {
    return signJNI.HMM_viterbi(swigCPtr, this, Obs.getCPtr(ob), ob, SWIGTYPE_p_p_int.getCPtr(statSeq), last_state_exit_oblige);
  }

  public double forward(Obs ob) {
    return signJNI.HMM_forward(swigCPtr, this, Obs.getCPtr(ob), ob);
  }

  public boolean baumwelch(SWIGTYPE_p_double LL) {
    return signJNI.HMM_baumwelch(swigCPtr, this, SWIGTYPE_p_double.getCPtr(LL));
  }

  public boolean train() {
    return signJNI.HMM_train(swigCPtr, this);
  }

  public boolean save(String modelFile, boolean binary) {
    return signJNI.HMM_save(swigCPtr, this, modelFile, binary);
  }

  public void dump() {
    signJNI.HMM_dump(swigCPtr, this);
  }

  public int getSeqLenK(int arg0) {
    return signJNI.HMM_getSeqLenK(swigCPtr, this, arg0);
  }

  public SWIGTYPE_p_int getSeqK(int arg0) {
    long cPtr = signJNI.HMM_getSeqK(swigCPtr, this, arg0);
    return (cPtr == 0) ? null : new SWIGTYPE_p_int(cPtr, false);
  }

  public void initKObs(int k, Obs obs) {
    signJNI.HMM_initKObs(swigCPtr, this, k, Obs.getCPtr(obs), obs);
  }

  public void getInitObs(int k) {
    signJNI.HMM_getInitObs(swigCPtr, this, k);
  }

  public double scomputeViterbiHamDistance(SWIGTYPE_p_p_int firstSeq, int firstSeqLen, SWIGTYPE_p_int secondSeq, int secondSeqLen) {
    return signJNI.HMM_scomputeViterbiHamDistance(swigCPtr, this, SWIGTYPE_p_p_int.getCPtr(firstSeq), firstSeqLen, SWIGTYPE_p_int.getCPtr(secondSeq), secondSeqLen);
  }

  public SWIGTYPE_p_p_int getInitInt() {
    long cPtr = signJNI.HMM_getInitInt(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_p_int(cPtr, false);
  }

  public double entropy(Obs ob, SWIGTYPE_p_int statSeq) {
    return signJNI.HMM_entropy(swigCPtr, this, Obs.getCPtr(ob), ob, SWIGTYPE_p_int.getCPtr(statSeq));
  }

  public double entropySwig(Obs ob, SWIGTYPE_p_p_int statSeq) {
    return signJNI.HMM_entropySwig(swigCPtr, this, Obs.getCPtr(ob), ob, SWIGTYPE_p_p_int.getCPtr(statSeq));
  }

}
