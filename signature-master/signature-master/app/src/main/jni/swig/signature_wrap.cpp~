/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.33
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */


#ifdef __cplusplus
template<typename T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTELC__)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" } };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include "signature.h"
#include "Obs.h"
#include "gmm.h"
#include "hmm.h"


#ifdef __cplusplus
extern "C" {
#endif

JNIEXPORT jint JNICALL Java_signJNI_MAX_1RADIUS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 10000;
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_signJNI_MAX_1L2W_1RATIO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 5;
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_signJNI_Obs_1changeCoordinates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jint jarg4, jint jarg5) {
  jboolean jresult = 0 ;
  Obs *arg1 = (Obs *) 0 ;
  double **arg2 = (double **) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Obs **)&jarg1; 
  arg2 = *(double ***)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (bool)(arg1)->changeCoordinates(arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_signJNI_Obs_1reduceParameters_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  Obs *arg1 = (Obs *) 0 ;
  double **arg2 = (double **) 0 ;
  double **arg3 = (double **) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Obs **)&jarg1; 
  arg2 = *(double ***)&jarg2; 
  arg3 = *(double ***)&jarg3; 
  (arg1)->reduceParameters(arg2,arg3);
}


JNIEXPORT void JNICALL Java_signJNI_Obs_1reduceParameters_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Obs *arg1 = (Obs *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Obs **)&jarg1; 
  (arg1)->reduceParameters();
}


JNIEXPORT void JNICALL Java_signJNI_Obs_1selectParameters(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  Obs *arg1 = (Obs *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Obs **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->selectParameters(arg2,arg3);
}


JNIEXPORT void JNICALL Java_signJNI_Obs_1selectParametersSwig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Obs *arg1 = (Obs *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Obs **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->selectParametersSwig(arg2);
}


JNIEXPORT void JNICALL Java_signJNI_Obs_1normalizeParameters_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  Obs *arg1 = (Obs *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Obs **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  (arg1)->normalizeParameters(arg2,arg3);
}


JNIEXPORT void JNICALL Java_signJNI_Obs_1normalizeParameters_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Obs *arg1 = (Obs *) 0 ;
  double *arg2 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Obs **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  (arg1)->normalizeParameters(arg2);
}


JNIEXPORT jboolean JNICALL Java_signJNI_Obs_1save(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jboolean jresult = 0 ;
  Obs *arg1 = (Obs *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Obs **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->save(arg2,arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


JNIEXPORT void JNICALL Java_signJNI_Obs_1transpose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Obs *arg1 = (Obs *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Obs **)&jarg1; 
  (arg1)->transpose();
}


JNIEXPORT jboolean JNICALL Java_signJNI_Obs_1addObs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4) {
  jboolean jresult = 0 ;
  Obs *arg1 = (Obs *) 0 ;
  Obs *arg2 = (Obs *) 0 ;
  int arg3 ;
  int arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Obs **)&jarg1; 
  arg2 = *(Obs **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)(arg1)->addObs(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_signJNI_Obs_1getObsSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Obs *arg1 = (Obs *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Obs **)&jarg1; 
  result = (int)(arg1)->getObsSize();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_signJNI_Obs_1getVecSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Obs *arg1 = (Obs *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Obs **)&jarg1; 
  result = (int)(arg1)->getVecSize();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_signJNI_Obs_1dump(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Obs *arg1 = (Obs *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Obs **)&jarg1; 
  (arg1)->dump();
}


JNIEXPORT jboolean JNICALL Java_signJNI_Obs_1isInit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Obs *arg1 = (Obs *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Obs **)&jarg1; 
  result = (bool)(arg1)->isInit();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_signJNI_new_1Obs_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  Obs *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (Obs *)new Obs(arg1,arg2);
  *(Obs **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_signJNI_new_1Obs_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  Obs *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (Obs *)new Obs(arg1);
  *(Obs **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


JNIEXPORT jlong JNICALL Java_signJNI_new_1Obs_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  Obs *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  result = (Obs *)new Obs(arg1,arg2);
  *(Obs **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


JNIEXPORT jlong JNICALL Java_signJNI_new_1Obs_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int arg3 ;
  Obs *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (Obs *)new Obs(arg1,arg2,arg3);
  *(Obs **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


JNIEXPORT void JNICALL Java_signJNI_delete_1Obs(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Obs *arg1 = (Obs *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Obs **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_signJNI_Obs_1getme(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Obs *arg1 = (Obs *) 0 ;
  Obs *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Obs **)&jarg1; 
  result = (Obs *)(arg1)->getme();
  *(Obs **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_signJNI_N_1POINTS_1MIN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 40;
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_signJNI_signature_1parameterize4PDA(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  signature *arg1 = (signature *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(signature **)&jarg1; 
  result = (bool)(arg1)->parameterize4PDA();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_signJNI_signature_1rotation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  signature *arg1 = (signature *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(signature **)&jarg1; 
  result = (double)(arg1)->rotation();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_signJNI_new_1signature_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  signature *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (signature *)new signature(arg1,arg2);
  *(signature **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_signJNI_new_1signature_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  signature *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (signature *)new signature(arg1);
  *(signature **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


JNIEXPORT jlong JNICALL Java_signJNI_new_1signature_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  signature *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  result = (signature *)new signature(arg1,arg2);
  *(signature **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


JNIEXPORT jlong JNICALL Java_signJNI_new_1signature_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int arg3 ;
  signature *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (signature *)new signature(arg1,arg2,arg3);
  *(signature **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_signJNI_signature_1setIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8) {
  jboolean jresult = 0 ;
  signature *arg1 = (signature *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(signature **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  result = (bool)(arg1)->setIndex(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_signJNI_signature_1centralizeCoordinates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  signature *arg1 = (signature *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(signature **)&jarg1; 
  result = (bool)(arg1)->centralizeCoordinates();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_signJNI_signature_1zeroBaseNorm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  signature *arg1 = (signature *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(signature **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  arg3 = *(int **)&jarg3; 
  result = (bool)(arg1)->zeroBaseNorm(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_signJNI_signature_1interpolateCoordinates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  signature *arg1 = (signature *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(signature **)&jarg1; 
  (arg1)->interpolateCoordinates();
}


JNIEXPORT jdouble JNICALL Java_signJNI_signature_1normalizeSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jdouble jresult = 0 ;
  signature *arg1 = (signature *) 0 ;
  double arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(signature **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (double)(arg1)->normalizeSize(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_signJNI_signature_1normalizeDirection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  signature *arg1 = (signature *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(signature **)&jarg1; 
  result = (double)(arg1)->normalizeDirection();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_signJNI_signature_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  signature *arg1 = (signature *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(signature **)&jarg1; 
  result = (bool)(arg1)->trim();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_signJNI_signature_1filter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  signature *arg1 = (signature *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(signature **)&jarg1; 
  result = (bool)(arg1)->filter();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_signJNI_signature_1parameterize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  signature *arg1 = (signature *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(signature **)&jarg1; 
  result = (bool)(arg1)->parameterize();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_signJNI_signature_1parameterizeXY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  signature *arg1 = (signature *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(signature **)&jarg1; 
  result = (bool)(arg1)->parameterizeXY();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_signJNI_delete_1signature(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  signature *arg1 = (signature *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(signature **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jdouble JNICALL Java_signJNI_LOG_1ZERO_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double) -1e5;
  
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_signJNI_PRO_1MIN_1VAL_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double) 1e-40;
  
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_signJNI_COV_1DIAG_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 1;
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_signJNI_COV_1FULL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 2;
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_signJNI_PARAMETER_1STANDARD_1VARIATION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 2;
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_signJNI_new_1GMM_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  GMM *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = jarg2 ? true : false; 
  result = (GMM *)new GMM(arg1,arg2);
  *(GMM **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_signJNI_GMM_1save(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jboolean jresult = 0 ;
  GMM *arg1 = (GMM *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GMM **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->save(arg2,arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


JNIEXPORT jint JNICALL Java_signJNI_GMM_1getVectorSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  GMM *arg1 = (GMM *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GMM **)&jarg1; 
  result = (int)(arg1)->getVectorSize();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_signJNI_GMM_1getTrainingLogLikelihood(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  GMM *arg1 = (GMM *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GMM **)&jarg1; 
  result = (double)(arg1)->getTrainingLogLikelihood();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_signJNI_GMM_1computeGama(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  GMM *arg1 = (GMM *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GMM **)&jarg1; 
  (arg1)->computeGama();
}


JNIEXPORT jint JNICALL Java_signJNI_GMM_1getGaussianNumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  GMM *arg1 = (GMM *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GMM **)&jarg1; 
  result = (int)(arg1)->getGaussianNumber();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_signJNI_GMM_1setGaussianNumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  GMM *arg1 = (GMM *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GMM **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setGaussianNumber(arg2);
}


JNIEXPORT jboolean JNICALL Java_signJNI_GMM_1assignObs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  GMM *arg1 = (GMM *) 0 ;
  Obs *arg2 = (Obs *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GMM **)&jarg1; 
  arg2 = *(Obs **)&jarg2; 
  result = (bool)(arg1)->assignObs(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_signJNI_GMM_1normalizeObsParameters(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  GMM *arg1 = (GMM *) 0 ;
  Obs *arg2 = (Obs *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GMM **)&jarg1; 
  arg2 = *(Obs **)&jarg2; 
  result = (bool)(arg1)->normalizeObsParameters(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_signJNI_GMM_1test(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  GMM *arg1 = (GMM *) 0 ;
  Obs *arg2 = (Obs *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GMM **)&jarg1; 
  arg2 = *(Obs **)&jarg2; 
  result = (double)(arg1)->test(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_signJNI_GMM_1restimateModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  GMM *arg1 = (GMM *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GMM **)&jarg1; 
  result = (double)(arg1)->restimateModel();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_signJNI_GMM_1train(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  GMM *arg1 = (GMM *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GMM **)&jarg1; 
  result = (bool)(arg1)->train();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_signJNI_GMM_1initProObs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  GMM *arg1 = (GMM *) 0 ;
  Obs *arg2 = (Obs *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GMM **)&jarg1; 
  arg2 = *(Obs **)&jarg2; 
  result = (bool)(arg1)->initProObs(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_signJNI_GMM_1isInit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  GMM *arg1 = (GMM *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GMM **)&jarg1; 
  result = (bool)(arg1)->isInit();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_signJNI_GMM_1dump(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  GMM *arg1 = (GMM *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GMM **)&jarg1; 
  (arg1)->dump();
}


JNIEXPORT jlong JNICALL Java_signJNI_new_1GMM_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jboolean jarg4, jboolean jarg5, jdouble jarg6, jdouble jarg7, jint jarg8) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  bool arg4 ;
  bool arg5 ;
  double arg6 ;
  double arg7 ;
  int arg8 ;
  GMM *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (int)jarg8; 
  result = (GMM *)new GMM(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  *(GMM **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_signJNI_new_1GMM_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jboolean jarg4, jboolean jarg5, jdouble jarg6, jdouble jarg7) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  bool arg4 ;
  bool arg5 ;
  double arg6 ;
  double arg7 ;
  GMM *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  result = (GMM *)new GMM(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  *(GMM **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_signJNI_new_1GMM_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jboolean jarg4, jboolean jarg5, jdouble jarg6) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  bool arg4 ;
  bool arg5 ;
  double arg6 ;
  GMM *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = (double)jarg6; 
  result = (GMM *)new GMM(arg1,arg2,arg3,arg4,arg5,arg6);
  *(GMM **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_signJNI_new_1GMM_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jboolean jarg4, jboolean jarg5) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  bool arg4 ;
  bool arg5 ;
  GMM *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  result = (GMM *)new GMM(arg1,arg2,arg3,arg4,arg5);
  *(GMM **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_signJNI_new_1GMM_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  bool arg4 ;
  GMM *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (GMM *)new GMM(arg1,arg2,arg3,arg4);
  *(GMM **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_signJNI_new_1GMM_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  GMM *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (GMM *)new GMM(arg1,arg2,arg3);
  *(GMM **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_signJNI_new_1GMM_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  GMM *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (GMM *)new GMM(arg1,arg2);
  *(GMM **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_signJNI_delete_1GMM(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  GMM *arg1 = (GMM *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GMM **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jboolean JNICALL Java_signJNI_GMM_1initGMM(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  GMM *arg1 = (GMM *) 0 ;
  Obs *arg2 = (Obs *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GMM **)&jarg1; 
  arg2 = *(Obs **)&jarg2; 
  result = (bool)(arg1)->initGMM(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_signJNI_MAX_1ITER_1HMM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 30;
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_signJNI_END_1ACCURACY_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double) 1e-2;
  
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_signJNI_END_1ITERATION_1NUMBER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0;
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_signJNI_TRANS_1LR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 1;
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_signJNI_TRANS_1BAKIS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 2;
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_signJNI_TRANS_1ERGODIC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 3;
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_signJNI_HMM_1tbStSequence_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  HMM *arg1 = (HMM *) 0 ;
  int **arg2 = (int **) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HMM **)&jarg1; 
  arg2 = *(int ***)&jarg2; 
  if (arg1) (arg1)->tbStSequence = arg2;
  
}


JNIEXPORT jlong JNICALL Java_signJNI_HMM_1tbStSequence_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  HMM *arg1 = (HMM *) 0 ;
  int **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HMM **)&jarg1; 
  result = (int **) ((arg1)->tbStSequence);
  *(int ***)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_signJNI_HMM_1tbStSequenceLen_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  HMM *arg1 = (HMM *) 0 ;
  int *arg2 = (int *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HMM **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  if (arg1) (arg1)->tbStSequenceLen = arg2;
  
}


JNIEXPORT jlong JNICALL Java_signJNI_HMM_1tbStSequenceLen_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  HMM *arg1 = (HMM *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HMM **)&jarg1; 
  result = (int *) ((arg1)->tbStSequenceLen);
  *(int **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_signJNI_HMM_1setInitializationProperty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  HMM *arg1 = (HMM *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HMM **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setInitializationProperty(arg2);
}


JNIEXPORT jdouble JNICALL Java_signJNI_HMM_1computeViterbiHamDistance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jlong jarg4, jint jarg5) {
  jdouble jresult = 0 ;
  HMM *arg1 = (HMM *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  int arg5 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HMM **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(int **)&jarg4; 
  arg5 = (int)jarg5; 
  result = (double)(arg1)->computeViterbiHamDistance(arg2,arg3,arg4,arg5);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_signJNI_HMM_1normalizeObsParameters(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  HMM *arg1 = (HMM *) 0 ;
  Obs *arg2 = (Obs *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(HMM **)&jarg1; 
  arg2 = *(Obs **)&jarg2; 
  result = (bool)(arg1)->normalizeObsParameters(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_signJNI_HMM_1setNStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  HMM *arg1 = (HMM *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HMM **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setNStates(arg2);
}


JNIEXPORT void JNICALL Java_signJNI_HMM_1setNGaussians(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  HMM *arg1 = (HMM *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HMM **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setNGaussians(arg2);
}


JNIEXPORT jdouble JNICALL Java_signJNI_HMM_1getLLba(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  HMM *arg1 = (HMM *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HMM **)&jarg1; 
  result = (double)(arg1)->getLLba();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_signJNI_HMM_1assignObs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  HMM *arg1 = (HMM *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HMM **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->assignObs(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_signJNI_HMM_1getStateNumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  HMM *arg1 = (HMM *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HMM **)&jarg1; 
  result = (int)(arg1)->getStateNumber();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_signJNI_HMM_1getObsNumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  HMM *arg1 = (HMM *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HMM **)&jarg1; 
  result = (int)(arg1)->getObsNumber();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_signJNI_HMM_1isInit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  HMM *arg1 = (HMM *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HMM **)&jarg1; 
  result = (bool)(arg1)->isInit();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_signJNI_new_1HMM_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  HMM *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = jarg2 ? true : false; 
  result = (HMM *)new HMM(arg1,arg2);
  *(HMM **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


JNIEXPORT jlong JNICALL Java_signJNI_new_1HMM_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jint jarg4, jboolean jarg5, jboolean jarg6, jdouble jarg7, jdouble jarg8, jint jarg9) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  bool arg5 ;
  bool arg6 ;
  double arg7 ;
  double arg8 ;
  int arg9 ;
  HMM *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  arg9 = (int)jarg9; 
  result = (HMM *)new HMM(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  *(HMM **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_signJNI_new_1HMM_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jint jarg4, jboolean jarg5, jboolean jarg6, jdouble jarg7, jdouble jarg8) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  bool arg5 ;
  bool arg6 ;
  double arg7 ;
  double arg8 ;
  HMM *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  result = (HMM *)new HMM(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  *(HMM **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_signJNI_new_1HMM_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jint jarg4, jboolean jarg5, jboolean jarg6, jdouble jarg7) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  bool arg5 ;
  bool arg6 ;
  double arg7 ;
  HMM *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  arg7 = (double)jarg7; 
  result = (HMM *)new HMM(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  *(HMM **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_signJNI_new_1HMM_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jint jarg4, jboolean jarg5, jboolean jarg6) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  bool arg5 ;
  bool arg6 ;
  HMM *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  result = (HMM *)new HMM(arg1,arg2,arg3,arg4,arg5,arg6);
  *(HMM **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_signJNI_new_1HMM_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jint jarg4, jboolean jarg5) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  bool arg5 ;
  HMM *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (HMM *)new HMM(arg1,arg2,arg3,arg4,arg5);
  *(HMM **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_signJNI_new_1HMM_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jint jarg4) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  HMM *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (HMM *)new HMM(arg1,arg2,arg3,arg4);
  *(HMM **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_signJNI_new_1HMM_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  HMM *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (HMM *)new HMM(arg1,arg2,arg3);
  *(HMM **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_signJNI_new_1HMM_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  HMM *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (HMM *)new HMM(arg1,arg2);
  *(HMM **)&jresult = result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_signJNI_HMM_1initHMM(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  HMM *arg1 = (HMM *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HMM **)&jarg1; 
  result = (bool)(arg1)->initHMM();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_signJNI_HMM_1viterbi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jboolean jarg4) {
  jdouble jresult = 0 ;
  HMM *arg1 = (HMM *) 0 ;
  Obs *arg2 = (Obs *) 0 ;
  int **arg3 = (int **) 0 ;
  bool arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(HMM **)&jarg1; 
  arg2 = *(Obs **)&jarg2; 
  arg3 = *(int ***)&jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (double)(arg1)->viterbi(arg2,arg3,arg4);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_signJNI_HMM_1forward(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  HMM *arg1 = (HMM *) 0 ;
  Obs *arg2 = (Obs *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(HMM **)&jarg1; 
  arg2 = *(Obs **)&jarg2; 
  result = (double)(arg1)->forward(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_signJNI_HMM_1baumwelch(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  HMM *arg1 = (HMM *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HMM **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (bool)(arg1)->baumwelch(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_signJNI_HMM_1train(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  HMM *arg1 = (HMM *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HMM **)&jarg1; 
  result = (bool)(arg1)->train();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_signJNI_HMM_1save(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jboolean jresult = 0 ;
  HMM *arg1 = (HMM *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HMM **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->save(arg2,arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


JNIEXPORT void JNICALL Java_signJNI_HMM_1dump(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  HMM *arg1 = (HMM *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HMM **)&jarg1; 
  (arg1)->dump();
}


JNIEXPORT void JNICALL Java_signJNI_delete_1HMM(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  HMM *arg1 = (HMM *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(HMM **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jint JNICALL Java_signJNI_HMM_1getSeqLenK(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  HMM *arg1 = (HMM *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HMM **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->getSeqLenK(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_signJNI_HMM_1getSeqK(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  HMM *arg1 = (HMM *) 0 ;
  int arg2 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HMM **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int *)(arg1)->getSeqK(arg2);
  *(int **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_signJNI_HMM_1initKObs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  HMM *arg1 = (HMM *) 0 ;
  int arg2 ;
  Obs *arg3 = (Obs *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(HMM **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(Obs **)&jarg3; 
  (arg1)->initKObs(arg2,arg3);
}


JNIEXPORT void JNICALL Java_signJNI_HMM_1getInitObs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  HMM *arg1 = (HMM *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HMM **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->getInitObs(arg2);
}


JNIEXPORT jdouble JNICALL Java_signJNI_HMM_1scomputeViterbiHamDistance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jlong jarg4, jint jarg5) {
  jdouble jresult = 0 ;
  HMM *arg1 = (HMM *) 0 ;
  int **arg2 = (int **) 0 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  int arg5 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HMM **)&jarg1; 
  arg2 = *(int ***)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(int **)&jarg4; 
  arg5 = (int)jarg5; 
  result = (double)(arg1)->scomputeViterbiHamDistance(arg2,arg3,arg4,arg5);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_signJNI_HMM_1getInitInt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  HMM *arg1 = (HMM *) 0 ;
  int **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HMM **)&jarg1; 
  result = (int **)(arg1)->getInitInt();
  *(int ***)&jresult = result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_signJNI_HMM_1entropy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jdouble jresult = 0 ;
  HMM *arg1 = (HMM *) 0 ;
  Obs *arg2 = (Obs *) 0 ;
  int *arg3 = (int *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(HMM **)&jarg1; 
  arg2 = *(Obs **)&jarg2; 
  arg3 = *(int **)&jarg3; 
  result = (double)(arg1)->entropy(arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_signJNI_HMM_1entropySwig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jdouble jresult = 0 ;
  HMM *arg1 = (HMM *) 0 ;
  Obs *arg2 = (Obs *) 0 ;
  int **arg3 = (int **) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(HMM **)&jarg1; 
  arg2 = *(Obs **)&jarg2; 
  arg3 = *(int ***)&jarg3; 
  result = (double)(arg1)->entropySwig(arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_signJNI_SWIGsignatureUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Obs **)&baseptr = *(signature **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

